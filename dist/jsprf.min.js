angular.module('jsprf', [
  'jsprf.controllers',
  'ui.router'
])

.config(function($stateProvider, $urlRouterProvider) {
  //
  // For any unmatched url, redirect to /state1
  $urlRouterProvider.otherwise("/benchmark");
  //
  // Now set up the states
  $stateProvider
    .state('home', {
      url: "/",
      templateUrl: "index.html"
    })
    .state('benchmark', {
      url: "/benchmark",
      templateUrl: "app/views/benchmark.html",
      controller: "benchmarkController"
    })
});

angular.module('jsprf.controllers', []);
angular.module('jsprf.services', []);

angular.module('jsprf.controllers')

  .controller('benchmarkController', ['$scope', function ($scope) {
    $scope.editMode = true
    var benchmarkSuite
    /**
     * Pass in the "winning" benchmarks from the benchmark.js suite and this will mark the winners in $scope.scripts
     * @param  {Array} winningScripts [description]
     * @return {[type]}                [description]
     */
    function highlightWinners (suite) {
      var completed = suite.filter('successful')
      var winners = suite.filter('fastest')
      var losers = suite.filter('slowest')

      $scope.$apply(function () {
        if (completed.length > 1) {
          $scope.scripts.forEach(function (script) {
            if (script.results) {
              var found = _.find(winners, {'name': script.name})
              if (found) {
                script.winner = true
                script.factor = (script.results.hz / losers[0].hz).toFixed(2) + "x faster"
              }
              else {
                script.loser = !!_.find(losers, {'name': script.name})
                script.factor = (script.results.hz / winners[0].hz).toFixed(2) + "x slower"
              }
            }
          })
        }
      })
    }

    /**
     * Just remove any properties from the scripts that were added during the last benchmark run
     */
    function resetBenchmarks() {
        $scope.scripts.forEach(function (script){
            delete script.error
            delete script.results
        })
    }

    /**
     * Starter benchmark scripts
     * @type {Array}
     */
    $scope.scripts = [
      {content: "/o/.test('Hello World!');", name: "RegExp#test"},
      {content: "'Hello World!'.indexOf('o') > -1;", name: "String#indexOf"},
      {content: "!!'Hello World!'.match(/o/);", name: "String#match"}
    ]

    $scope.addScript = function () {
      $scope.scripts.push({})
    }

    $scope.removeScript = function (script) {
      $scope.scripts.splice($scope.scripts.indexOf(script), 1)
    }

    /**
     * Start the Benchmark.js suite
     * @return {[type]} [description]
     */
    $scope.runPerfs = function () {
      $scope.editMode = false
      resetBenchmarks()
      benchmarkSuite = new Benchmark.Suite
      var count = 1
      // add tests
      $scope.scripts.forEach(function (script) {
        script.name = script.name || 'script' + count
        count++
        benchmarkSuite.add(script.name, script.content, {
          onStart: function (event) {
            $scope.$apply(function () {
              script.inProgress = true
            })
          },
          onError: function (err) {
            $scope.$apply(function () {
              script.error = err.message.message
            })
          },
          onComplete: function (event) {
            $scope.$apply(function () {
              var bench = event.target
              script.inProgress = false
              script.ops = Benchmark.formatNumber(bench.hz.toFixed(bench.hz < 100 ? 2 : 0)) + ' ops/sec (\xb1' + bench.stats.rme.toFixed(2) + '%)'
              script.results = bench
            })
          }
        })
      })
      // add benchmark suite listeners
      benchmarkSuite
        .on('start', function() {
          $scope.inProgress = true
        })
        .on('cycle', function (event) {
          highlightWinners(this)
        })
        .on('complete', function() {
          $scope.inProgress = false
        })
        // run async
        .run({ 'async': true })
    }

    $scope.cancelPerfs = function () {
        benchmarkSuite.abort()
    }
    $scope.switchToEdit = function () {
        $scope.editMode = true
    }
  }])

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL2JlbmNobWFya0NvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImpzcHJmLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdqc3ByZicsIFtcbiAgJ2pzcHJmLmNvbnRyb2xsZXJzJyxcbiAgJ3VpLnJvdXRlcidcbl0pXG5cbi5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAvL1xuICAvLyBGb3IgYW55IHVubWF0Y2hlZCB1cmwsIHJlZGlyZWN0IHRvIC9zdGF0ZTFcbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9iZW5jaG1hcmtcIik7XG4gIC8vXG4gIC8vIE5vdyBzZXQgdXAgdGhlIHN0YXRlc1xuICAkc3RhdGVQcm92aWRlclxuICAgIC5zdGF0ZSgnaG9tZScsIHtcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICB0ZW1wbGF0ZVVybDogXCJpbmRleC5odG1sXCJcbiAgICB9KVxuICAgIC5zdGF0ZSgnYmVuY2htYXJrJywge1xuICAgICAgdXJsOiBcIi9iZW5jaG1hcmtcIixcbiAgICAgIHRlbXBsYXRlVXJsOiBcImFwcC92aWV3cy9iZW5jaG1hcmsuaHRtbFwiLFxuICAgICAgY29udHJvbGxlcjogXCJiZW5jaG1hcmtDb250cm9sbGVyXCJcbiAgICB9KVxufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdqc3ByZi5jb250cm9sbGVycycsIFtdKTtcbmFuZ3VsYXIubW9kdWxlKCdqc3ByZi5zZXJ2aWNlcycsIFtdKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdqc3ByZi5jb250cm9sbGVycycpXG5cbiAgLmNvbnRyb2xsZXIoJ2JlbmNobWFya0NvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgICAkc2NvcGUuZWRpdE1vZGUgPSB0cnVlXG4gICAgdmFyIGJlbmNobWFya1N1aXRlXG4gICAgLyoqXG4gICAgICogUGFzcyBpbiB0aGUgXCJ3aW5uaW5nXCIgYmVuY2htYXJrcyBmcm9tIHRoZSBiZW5jaG1hcmsuanMgc3VpdGUgYW5kIHRoaXMgd2lsbCBtYXJrIHRoZSB3aW5uZXJzIGluICRzY29wZS5zY3JpcHRzXG4gICAgICogQHBhcmFtICB7QXJyYXl9IHdpbm5pbmdTY3JpcHRzIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoaWdobGlnaHRXaW5uZXJzIChzdWl0ZSkge1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IHN1aXRlLmZpbHRlcignc3VjY2Vzc2Z1bCcpXG4gICAgICB2YXIgd2lubmVycyA9IHN1aXRlLmZpbHRlcignZmFzdGVzdCcpXG4gICAgICB2YXIgbG9zZXJzID0gc3VpdGUuZmlsdGVyKCdzbG93ZXN0JylcblxuICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb21wbGV0ZWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICRzY29wZS5zY3JpcHRzLmZvckVhY2goZnVuY3Rpb24gKHNjcmlwdCkge1xuICAgICAgICAgICAgaWYgKHNjcmlwdC5yZXN1bHRzKSB7XG4gICAgICAgICAgICAgIHZhciBmb3VuZCA9IF8uZmluZCh3aW5uZXJzLCB7J25hbWUnOiBzY3JpcHQubmFtZX0pXG4gICAgICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgICAgIHNjcmlwdC53aW5uZXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgc2NyaXB0LmZhY3RvciA9IChzY3JpcHQucmVzdWx0cy5oeiAvIGxvc2Vyc1swXS5oeikudG9GaXhlZCgyKSArIFwieCBmYXN0ZXJcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjcmlwdC5sb3NlciA9ICEhXy5maW5kKGxvc2VycywgeyduYW1lJzogc2NyaXB0Lm5hbWV9KVxuICAgICAgICAgICAgICAgIHNjcmlwdC5mYWN0b3IgPSAoc2NyaXB0LnJlc3VsdHMuaHogLyB3aW5uZXJzWzBdLmh6KS50b0ZpeGVkKDIpICsgXCJ4IHNsb3dlclwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEp1c3QgcmVtb3ZlIGFueSBwcm9wZXJ0aWVzIGZyb20gdGhlIHNjcmlwdHMgdGhhdCB3ZXJlIGFkZGVkIGR1cmluZyB0aGUgbGFzdCBiZW5jaG1hcmsgcnVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzZXRCZW5jaG1hcmtzKCkge1xuICAgICAgICAkc2NvcGUuc2NyaXB0cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JpcHQpe1xuICAgICAgICAgICAgZGVsZXRlIHNjcmlwdC5lcnJvclxuICAgICAgICAgICAgZGVsZXRlIHNjcmlwdC5yZXN1bHRzXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnRlciBiZW5jaG1hcmsgc2NyaXB0c1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICAkc2NvcGUuc2NyaXB0cyA9IFtcbiAgICAgIHtjb250ZW50OiBcIi9vLy50ZXN0KCdIZWxsbyBXb3JsZCEnKTtcIiwgbmFtZTogXCJSZWdFeHAjdGVzdFwifSxcbiAgICAgIHtjb250ZW50OiBcIidIZWxsbyBXb3JsZCEnLmluZGV4T2YoJ28nKSA+IC0xO1wiLCBuYW1lOiBcIlN0cmluZyNpbmRleE9mXCJ9LFxuICAgICAge2NvbnRlbnQ6IFwiISEnSGVsbG8gV29ybGQhJy5tYXRjaCgvby8pO1wiLCBuYW1lOiBcIlN0cmluZyNtYXRjaFwifVxuICAgIF1cblxuICAgICRzY29wZS5hZGRTY3JpcHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkc2NvcGUuc2NyaXB0cy5wdXNoKHt9KVxuICAgIH1cblxuICAgICRzY29wZS5yZW1vdmVTY3JpcHQgPSBmdW5jdGlvbiAoc2NyaXB0KSB7XG4gICAgICAkc2NvcGUuc2NyaXB0cy5zcGxpY2UoJHNjb3BlLnNjcmlwdHMuaW5kZXhPZihzY3JpcHQpLCAxKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRoZSBCZW5jaG1hcmsuanMgc3VpdGVcbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICAkc2NvcGUucnVuUGVyZnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkc2NvcGUuZWRpdE1vZGUgPSBmYWxzZVxuICAgICAgcmVzZXRCZW5jaG1hcmtzKClcbiAgICAgIGJlbmNobWFya1N1aXRlID0gbmV3IEJlbmNobWFyay5TdWl0ZVxuICAgICAgdmFyIGNvdW50ID0gMVxuICAgICAgLy8gYWRkIHRlc3RzXG4gICAgICAkc2NvcGUuc2NyaXB0cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JpcHQpIHtcbiAgICAgICAgc2NyaXB0Lm5hbWUgPSBzY3JpcHQubmFtZSB8fCAnc2NyaXB0JyArIGNvdW50XG4gICAgICAgIGNvdW50KytcbiAgICAgICAgYmVuY2htYXJrU3VpdGUuYWRkKHNjcmlwdC5uYW1lLCBzY3JpcHQuY29udGVudCwge1xuICAgICAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHNjcmlwdC5pblByb2dyZXNzID0gdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzY3JpcHQuZXJyb3IgPSBlcnIubWVzc2FnZS5tZXNzYWdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIGJlbmNoID0gZXZlbnQudGFyZ2V0XG4gICAgICAgICAgICAgIHNjcmlwdC5pblByb2dyZXNzID0gZmFsc2VcbiAgICAgICAgICAgICAgc2NyaXB0Lm9wcyA9IEJlbmNobWFyay5mb3JtYXROdW1iZXIoYmVuY2guaHoudG9GaXhlZChiZW5jaC5oeiA8IDEwMCA/IDIgOiAwKSkgKyAnIG9wcy9zZWMgKFxceGIxJyArIGJlbmNoLnN0YXRzLnJtZS50b0ZpeGVkKDIpICsgJyUpJ1xuICAgICAgICAgICAgICBzY3JpcHQucmVzdWx0cyA9IGJlbmNoXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAvLyBhZGQgYmVuY2htYXJrIHN1aXRlIGxpc3RlbmVyc1xuICAgICAgYmVuY2htYXJrU3VpdGVcbiAgICAgICAgLm9uKCdzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5pblByb2dyZXNzID0gdHJ1ZVxuICAgICAgICB9KVxuICAgICAgICAub24oJ2N5Y2xlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaGlnaGxpZ2h0V2lubmVycyh0aGlzKVxuICAgICAgICB9KVxuICAgICAgICAub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmluUHJvZ3Jlc3MgPSBmYWxzZVxuICAgICAgICB9KVxuICAgICAgICAvLyBydW4gYXN5bmNcbiAgICAgICAgLnJ1bih7ICdhc3luYyc6IHRydWUgfSlcbiAgICB9XG5cbiAgICAkc2NvcGUuY2FuY2VsUGVyZnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJlbmNobWFya1N1aXRlLmFib3J0KClcbiAgICB9XG4gICAgJHNjb3BlLnN3aXRjaFRvRWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHNjb3BlLmVkaXRNb2RlID0gdHJ1ZVxuICAgIH1cbiAgfV0pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
